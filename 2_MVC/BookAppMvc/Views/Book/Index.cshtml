@model PaginatedList<Book>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<div class="d-flex justify-content-between align-items-center pb-2">
    <span class="text-secondary mb-2">Showing 1 - @(Model.TotalItems < Model.PageSize ? Model.TotalItems :
                Model.PageSize) of @(Model.TotalItems) Results</span>
    <form asp-action="Index" method="get" class="form-inline">
        <div class="form-actions no-color">

            <p>
                <select class="mr-3 custom-select" name="SortString"
                    asp-items="@(new SelectList(new String[3] { "Price Low-High", "Price High-Low", "Normal" }))">
                    <option>@ViewData["Sort"]</option>
                </select>
                <input type="text" class="form-control" name="SearchString" value="@ViewData["Search"]" />
                <input type="submit" value="Search" class="btn btn-info" />
            </p>
        </div>
    </form>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Author)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Genre)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Author)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";

}

<hr class="mt-3">
<a asp-action="Index" asp-route-sortString="@ViewData["Sort"]" asp-route-pageNumber="@(Model.PageIndex - 1)"
    asp-route-searchString="@ViewData["Search"]" class="btn btn-outline-primary @prevDisabled rounded-0">
    Previous
</a>
<button class="btn  btn-outline-primary rounded-0 disabled">@(Model.PageIndex)</button>
<a asp-action="Index" asp-route-sortString="@ViewData["Sort"]" asp-route-pageNumber="@(Model.PageIndex + 1)"
    asp-route-searchString="@ViewData["Search"]" class="btn btn-outline-primary @nextDisabled rounded-0">
    Next
</a>
